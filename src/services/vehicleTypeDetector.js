/**
 * Sistema inteligente de detec√ß√£o de tipo de ve√≠culo
 * Identifica se √© Carro, Moto ou Caminh√£o baseado em marca e modelo
 */

// Marcas exclusivas de motos
const MOTO_BRANDS = [
    'HONDA', 'YAMAHA', 'SUZUKI', 'KAWASAKI', 'BMW MOTORRAD', 'DUCATI',
    'HARLEY-DAVIDSON', 'HARLEY DAVIDSON', 'TRIUMPH', 'KTM', 'ROYAL ENFIELD',
    'APRILIA', 'MV AGUSTA', 'BENELLI', 'SHINERAY', 'TRAXX', 'DAFRA',
    'KASINSKI', 'SUNDOWN', 'HAOJUE', 'JIANSHE', 'BULL', 'IROS',
    'HUSQVARNA', 'GAS GAS', 'BETA', 'SHERCO', 'MOTO GUZZI'
];

// Marcas exclusivas de carros
const CARRO_BRANDS = [
    'VOLKSWAGEN', 'VW', 'FIAT', 'CHEVROLET', 'FORD', 'TOYOTA', 'HYUNDAI',
    'RENAULT', 'NISSAN', 'PEUGEOT', 'CITROEN', 'JEEP', 'MITSUBISHI',
    'KIA', 'HONDA AUTOMOVEIS', 'AUDI', 'MERCEDES-BENZ', 'MERCEDES BENZ',
    'VOLVO', 'LAND ROVER', 'PORSCHE', 'FERRARI', 'LAMBORGHINI',
    'JAGUAR', 'MINI', 'SUBARU', 'MAZDA', 'LEXUS', 'INFINITI',
    'CHERY', 'JAC', 'LIFAN', 'GEELY', 'BYD', 'CAOA CHERY',
    'TESLA', 'ASTON MARTIN', 'BENTLEY', 'ROLLS-ROYCE', 'MASERATI',
    'ALFA ROMEO', 'SEAT', 'SKODA', 'SMART', 'DODGE', 'RAM',
    'CHRYSLER', 'CADILLAC', 'BUICK', 'GMC', 'LINCOLN'
];

// Marcas exclusivas de caminh√µes
const CAMINHAO_BRANDS = [
    'SCANIA', 'VOLVO TRUCKS', 'IVECO', 'DAF', 'MAN', 'MERCEDES-BENZ TRUCKS',
    'VOLKSWAGEN CAMINHOES', 'VW CAMINHOES', 'FORD CARGO', 'AGRALE'
];

// Palavras-chave no modelo que indicam moto
// IMPORTANTE: Evitar siglas gen√©ricas como "CG" sozinho (ex: SANTANA CG √© carro)
const MOTO_KEYWORDS = [
    'MOTO', 'MOTOCICLETA', 'CICLOMOTOR', 'SCOOTER', 'TRAIL', 'ENDURO',
    'CROSS', 'CUSTOM', 'CHOPPER', 'CRUISER', 'SPORT', 'NAKED', 'TOURING',
    'CG 125', 'CG 150', 'CG 160', 'CG125', 'CG150', 'CG160', // CG espec√≠fico com n√∫meros
    'CB', 'CBR', 'XRE', 'FAZER', 'YBR', 'FACTOR', 'TITAN', 'BIZ',
    'PCX', 'NMAX', 'BURGMAN', 'BOULEVARD', 'NINJA', 'Z', 'VERSYS',
    'STREET', 'ROAD', 'SOFTAIL', 'SPORTSTER', 'ELECTRA GLIDE',
    'MT', 'R1', 'R3', 'R6', 'GSX', 'HAYABUSA', 'V-STROM', 'VSTROM',
    'TIGER', 'BONNEVILLE', 'SCRAMBLER', 'MONSTER', 'PANIGALE',
    'MULTISTRADA', 'DIAVEL', 'AFRICA TWIN', 'GOLDWING', 'NC',
    'SH', 'LEAD', 'POP', 'START', 'FAN', 'BROS', 'XR', 'CRF',
    'WR', 'YZ', 'TTR', 'XT', 'XTZ', 'LANDER', 'CROSSER', 'TENERE',
    'DR', 'DL', 'BANDIT', 'INTRUDER', 'BOULEVARD', 'GLADIUS',
    'ER', 'KLX', 'KLR', 'VULCAN', 'ZX', 'ZZR', 'CONCOURS',
    'DUKE', 'RC', 'ADVENTURE', 'SUPER DUKE', 'SMC', 'SX', 'EXC',
    'METEOR', 'CLASSIC', 'INTERCEPTOR', 'CONTINENTAL', 'HIMALAYAN'
];

// Palavras-chave no modelo que indicam caminh√£o
const CAMINHAO_KEYWORDS = [
    'CAMINHAO', 'CAMINH√ÉO', 'TRUCK', 'CARGO', 'ATEGO', 'AXOR', 'ACTROS',
    'CONSTELLATION', 'WORKER', 'DELIVERY', 'ACCELO', 'TECTOR', 'STRALIS',
    'DAILY', 'VERTIS', 'FH', 'FM', 'VM', 'VNL', 'VNR', 'VHD',
    'TGX', 'TGS', 'TGL', 'TGM', 'XF', 'CF', 'LF',
    'SERIE R', 'SERIE P', 'SERIE G', 'SERIE S', 'SERIE V',
    'BARREIRO', 'MARACANAU', 'RESENDE', 'TAUBATE'
];

// Palavras-chave no modelo que indicam carro
const CARRO_KEYWORDS = [
    'SEDAN', 'HATCH', 'SUV', 'PICKUP', 'VAN', 'MINIVAN', 'WAGON',
    'COUPE', 'CONVERSIVEL', 'CONVERS√çVEL', 'CABRIO', 'ROADSTER',
    'GOL', 'POLO', 'VOYAGE', 'VIRTUS', 'NIVUS', 'T-CROSS', 'TCROSS',
    'TIGUAN', 'TAOS', 'AMAROK', 'SAVEIRO', 'JETTA', 'PASSAT', 'GOLF',
    'UNO', 'PALIO', 'SIENA', 'STRADA', 'TORO', 'ARGO', 'CRONOS',
    'MOBI', 'FIORINO', 'DUCATO', 'DOBLO', 'PULSE', 'FASTBACK',
    'ONIX', 'PRISMA', 'CRUZE', 'TRACKER', 'TRAILBLAZER', 'S10',
    'MONTANA', 'SPIN', 'COBALT', 'SONIC', 'EQUINOX', 'BLAZER',
    'KA', 'FIESTA', 'FOCUS', 'FUSION', 'ECOSPORT', 'EDGE', 'RANGER',
    'COROLLA', 'ETIOS', 'YARIS', 'HILUX', 'SW4', 'RAV4', 'COROLLA CROSS',
    'HB20', 'CRETA', 'TUCSON', 'SANTA FE', 'IX35', 'AZERA', 'ELANTRA',
    'SANDERO', 'LOGAN', 'DUSTER', 'CAPTUR', 'KWID', 'OROCH', 'KARDIAN',
    'KICKS', 'VERSA', 'SENTRA', 'FRONTIER', 'MARCH', 'LEAF',
    'RENEGADE', 'COMPASS', 'COMMANDER', 'WRANGLER', 'GRAND CHEROKEE',
    'CIVIC', 'CITY', 'FIT', 'HR-V', 'HRV', 'CR-V', 'CRV', 'ACCORD',
    'A3', 'A4', 'A5', 'A6', 'Q3', 'Q5', 'Q7', 'Q8', 'TT', 'R8',
    'CLASSE A', 'CLASSE B', 'CLASSE C', 'CLASSE E', 'CLASSE S',
    'GLA', 'GLB', 'GLC', 'GLE', 'GLS', 'CLA', 'CLS', 'SL', 'SLC',
    'SERIE 1', 'SERIE 2', 'SERIE 3', 'SERIE 4', 'SERIE 5', 'SERIE 6', 'SERIE 7',
    'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'Z4', 'I3', 'I8',
    'SPORTAGE', 'SORENTO', 'SELTOS', 'STONIC', 'SOUL', 'CERATO', 'OPTIMA',
    'OUTLANDER', 'ASX', 'ECLIPSE CROSS', 'L200', 'PAJERO',
    '208', '2008', '308', '3008', '408', '5008', 'PARTNER', 'EXPERT',
    'C3', 'C4', 'C4 CACTUS', 'AIRCROSS', 'JUMPER', 'BERLINGO'
];

// Marcas que fabricam m√∫ltiplos tipos de ve√≠culos (IMPORTANTE!)
const MULTI_TYPE_BRANDS = [
    'HONDA', 'BMW', 'VOLVO', 'MERCEDES-BENZ', 'MERCEDES BENZ', 'VOLKSWAGEN', 'VW'
];

/**
 * Detecta o tipo de ve√≠culo baseado em marca e modelo
 * PRIORIDADE: Modelo > Marca (para marcas que fabricam m√∫ltiplos tipos)
 * @param {string} marca - Marca do ve√≠culo
 * @param {string} modelo - Modelo do ve√≠culo
 * @param {string} tipoOriginal - Tipo original retornado pela API (opcional)
 * @returns {string} 'moto', 'carro' ou 'caminhao'
 */
export const detectVehicleType = (marca, modelo, tipoOriginal = '') => {
    if (!marca && !modelo) {
        return 'carro'; // Default
    }

    const marcaUpper = (marca || '').toUpperCase().trim();
    const modeloUpper = (modelo || '').toUpperCase().trim();
    const tipoUpper = (tipoOriginal || '').toUpperCase().trim();

    console.log('[VEHICLE TYPE DETECTOR] Analisando:', { marca: marcaUpper, modelo: modeloUpper, tipoOriginal: tipoUpper });

    // 1. Verifica tipo original se for claro
    if (tipoUpper.includes('MOTO') || tipoUpper.includes('MOTOCICLETA') || tipoUpper.includes('CICLOMOTOR')) {
        console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Tipo detectado pelo original: MOTO');
        return 'moto';
    }
    if (tipoUpper.includes('CAMINHAO') || tipoUpper.includes('CAMINH√ÉO') || tipoUpper.includes('TRUCK')) {
        console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Tipo detectado pelo original: CAMINH√ÉO');
        return 'caminhao';
    }

    // 2. PRIORIDADE: Para marcas multi-tipo, analisa MODELO PRIMEIRO
    const isMultiTypeBrand = MULTI_TYPE_BRANDS.some(brand => 
        marcaUpper.includes(brand) || brand.includes(marcaUpper)
    );

    if (isMultiTypeBrand) {
        console.log('[VEHICLE TYPE DETECTOR] üîç Marca multi-tipo detectada, analisando MODELO primeiro...');
        
        // Verifica palavras-chave no modelo para motos
        if (MOTO_KEYWORDS.some(keyword => modeloUpper.includes(keyword))) {
            console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Palavra-chave de MOTO detectada no modelo (marca multi-tipo)');
            return 'moto';
        }

        // Verifica palavras-chave no modelo para caminh√µes
        if (CAMINHAO_KEYWORDS.some(keyword => modeloUpper.includes(keyword))) {
            console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Palavra-chave de CAMINH√ÉO detectada no modelo (marca multi-tipo)');
            return 'caminhao';
        }

        // Verifica palavras-chave no modelo para carros
        if (CARRO_KEYWORDS.some(keyword => modeloUpper.includes(keyword))) {
            console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Palavra-chave de CARRO detectada no modelo (marca multi-tipo)');
            return 'carro';
        }

        // Casos espec√≠ficos por marca multi-tipo
        if (marcaUpper.includes('HONDA')) {
            // Honda sem identifica√ß√£o clara: assume moto (mais comum no Brasil)
            console.log('[VEHICLE TYPE DETECTOR] ‚ö†Ô∏è  HONDA sem identifica√ß√£o clara no modelo, assumindo MOTO');
            return 'moto';
        }

        if (marcaUpper.includes('BMW')) {
            // BMW Motorrad = moto, sen√£o carro
            if (marcaUpper.includes('MOTORRAD')) {
                console.log('[VEHICLE TYPE DETECTOR] ‚úÖ BMW MOTORRAD identificada como MOTO');
                return 'moto';
            }
            console.log('[VEHICLE TYPE DETECTOR] ‚úÖ BMW sem MOTORRAD, assumindo CARRO');
            return 'carro';
        }

        if (marcaUpper.includes('VOLVO')) {
            // Volvo Trucks = caminh√£o, sen√£o carro
            if (marcaUpper.includes('TRUCK')) {
                console.log('[VEHICLE TYPE DETECTOR] ‚úÖ VOLVO TRUCKS identificada como CAMINH√ÉO');
                return 'caminhao';
            }
            console.log('[VEHICLE TYPE DETECTOR] ‚úÖ VOLVO sem TRUCKS, assumindo CARRO');
            return 'carro';
        }

        if (marcaUpper.includes('MERCEDES') || marcaUpper.includes('BENZ')) {
            // Mercedes-Benz Trucks = caminh√£o, sen√£o carro
            if (marcaUpper.includes('TRUCK') || modeloUpper.includes('ATEGO') || modeloUpper.includes('AXOR') || modeloUpper.includes('ACTROS')) {
                console.log('[VEHICLE TYPE DETECTOR] ‚úÖ MERCEDES-BENZ identificada como CAMINH√ÉO');
                return 'caminhao';
            }
            console.log('[VEHICLE TYPE DETECTOR] ‚úÖ MERCEDES-BENZ sem indica√ß√£o de caminh√£o, assumindo CARRO');
            return 'carro';
        }

        if (marcaUpper.includes('VOLKSWAGEN') || marcaUpper.includes('VW')) {
            // VW Caminh√µes = caminh√£o, sen√£o carro
            if (marcaUpper.includes('CAMINHAO') || marcaUpper.includes('CAMINH√ÉO') || marcaUpper.includes('TRUCK')) {
                console.log('[VEHICLE TYPE DETECTOR] ‚úÖ VOLKSWAGEN CAMINH√ïES identificada como CAMINH√ÉO');
                return 'caminhao';
            }
            console.log('[VEHICLE TYPE DETECTOR] ‚úÖ VOLKSWAGEN sem indica√ß√£o de caminh√£o, assumindo CARRO');
            return 'carro';
        }

        // Default para marca multi-tipo sem identifica√ß√£o: carro
        console.log('[VEHICLE TYPE DETECTOR] ‚ö†Ô∏è  Marca multi-tipo sem identifica√ß√£o clara, assumindo CARRO');
        return 'carro';
    }

    // 3. Verifica marcas exclusivas de motos
    if (MOTO_BRANDS.some(brand => marcaUpper.includes(brand) || brand.includes(marcaUpper))) {
        console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Marca exclusiva de MOTO detectada');
        return 'moto';
    }

    // 4. Verifica marcas exclusivas de caminh√µes
    if (CAMINHAO_BRANDS.some(brand => marcaUpper.includes(brand) || brand.includes(marcaUpper))) {
        console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Marca exclusiva de CAMINH√ÉO detectada');
        return 'caminhao';
    }

    // 5. Verifica palavras-chave no modelo para motos
    // MAS ignora se for uma marca exclusiva de carros (evita falsos positivos como "SANTANA CG")
    const isCarBrand = CARRO_BRANDS.some(brand => marcaUpper.includes(brand) || brand.includes(marcaUpper));
    
    if (!isCarBrand && MOTO_KEYWORDS.some(keyword => modeloUpper.includes(keyword))) {
        console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Palavra-chave de MOTO detectada no modelo');
        return 'moto';
    }

    // 6. Verifica palavras-chave no modelo para caminh√µes
    if (CAMINHAO_KEYWORDS.some(keyword => modeloUpper.includes(keyword))) {
        console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Palavra-chave de CAMINH√ÉO detectada no modelo');
        return 'caminhao';
    }

    // 7. Verifica marcas exclusivas de carros
    if (CARRO_BRANDS.some(brand => marcaUpper.includes(brand) || brand.includes(marcaUpper))) {
        console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Marca exclusiva de CARRO detectada');
        return 'carro';
    }

    // 8. Verifica palavras-chave no modelo para carros
    if (CARRO_KEYWORDS.some(keyword => modeloUpper.includes(keyword))) {
        console.log('[VEHICLE TYPE DETECTOR] ‚úÖ Palavra-chave de CARRO detectada no modelo');
        return 'carro';
    }

    // 9. Default: CARRO (mais comum)
    console.log('[VEHICLE TYPE DETECTOR] ‚ö†Ô∏è  Tipo n√£o identificado claramente, assumindo CARRO');
    return 'carro';
};

/**
 * Valida se o tipo detectado est√° correto
 * @param {string} tipo - Tipo detectado
 * @param {string} marca - Marca do ve√≠culo
 * @param {string} modelo - Modelo do ve√≠culo
 * @returns {boolean} True se o tipo parece correto
 */
export const validateVehicleType = (tipo, marca, modelo) => {
    const tipoDetectado = detectVehicleType(marca, modelo);
    const isValid = tipo === tipoDetectado;
    
    if (!isValid) {
        console.warn(`[VEHICLE TYPE VALIDATOR] ‚ö†Ô∏è  Tipo inconsistente! Informado: ${tipo}, Detectado: ${tipoDetectado}`);
    }
    
    return isValid;
};

/**
 * Corrige o tipo de ve√≠culo se estiver errado
 * @param {Object} vehicleData - Dados do ve√≠culo
 * @returns {Object} Dados do ve√≠culo com tipo corrigido
 */
export const correctVehicleType = (vehicleData) => {
    const tipoOriginal = vehicleData.tipo || vehicleData.type || '';
    const tipoDetectado = detectVehicleType(vehicleData.marca, vehicleData.modelo, tipoOriginal);
    
    if (tipoOriginal && tipoOriginal !== tipoDetectado) {
        console.warn(`[VEHICLE TYPE CORRECTOR] üîß Corrigindo tipo: ${tipoOriginal} ‚Üí ${tipoDetectado}`);
    }
    
    return {
        ...vehicleData,
        tipo: tipoDetectado,
        type: tipoDetectado
    };
};
